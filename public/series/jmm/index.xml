<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jmm on Dev notes</title>
    <link>https://dddpaul.github.io/blog/series/jmm/</link>
    <description>Recent content in Jmm on Dev notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Dec 2014 18:33:46 +0000</lastBuildDate>
    <atom:link href="https://dddpaul.github.io/blog/series/jmm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java Memory Model in few words</title>
      <link>https://dddpaul.github.io/blog/2014/12/06/jmm-1/</link>
      <pubDate>Sat, 06 Dec 2014 18:33:46 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/12/06/jmm-1/</guid>
      <description>&lt;p&gt;This article is mostly consist of quotes from &lt;a href=&#34;http://www.manning.com/evans/&#34;&gt;The Well-Grounded Java Developer&lt;/a&gt; by Benjamin J. Evans and Martijn Verburg. I like simplicity and brevity of their explanation approach.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s how &lt;em&gt;Happens-Before&lt;/em&gt; and &lt;em&gt;Synchronizes-With&lt;/em&gt; relationships are explained.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Happens-Before — This relationship indicates that one block of code fully completes before the other can start.&lt;/li&gt;
&lt;li&gt;Synchronizes-With — This means that an action will synchronize its view of an object with main memory before continuing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The JMM has these main rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An unlock operation on a monitor &lt;em&gt;Synchronizes-With&lt;/em&gt; later lock operations.&lt;/li&gt;
&lt;li&gt;A write to a volatile variable &lt;em&gt;Synchronizes-With&lt;/em&gt; later reads of the variable.&lt;/li&gt;
&lt;li&gt;If an action A &lt;em&gt;Synchronizes-With&lt;/em&gt; action B, then A &lt;em&gt;Happens-Before&lt;/em&gt; B.&lt;/li&gt;
&lt;li&gt;If A comes before B in program order, within a thread, then A &lt;em&gt;Happens-Before&lt;/em&gt; B.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The general statement of the first two rules is that &lt;em&gt;&amp;ldquo;releases happen before acquires&amp;rdquo;&lt;/em&gt;. In other words, the locks that a thread holds when writing are released before the locks can be acquired by other operations (including reads).&lt;/p&gt;

&lt;p&gt;There are additional rules, which are really about sensible behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The completion of a constructor &lt;em&gt;Happens-Before&lt;/em&gt; the finalizer for that object starts to run (an object has to be fully constructed before it can be finalized).&lt;/li&gt;
&lt;li&gt;An action that starts a thread &lt;em&gt;Synchronizes-With&lt;/em&gt; the first action of the new thread.&lt;/li&gt;
&lt;li&gt;Thread.join() &lt;em&gt;Synchronizes-With&lt;/em&gt; the last (and all other) actions in the thread being joined.*&lt;/li&gt;
&lt;li&gt;If X &lt;em&gt;Happens-Before&lt;/em&gt; Y and Y &lt;em&gt;Happens-Before&lt;/em&gt; Z then X &lt;em&gt;Happens-Before&lt;/em&gt; Z (transitivity).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;They even have granted free access to entire &lt;a href=&#34;http://www.manning.com/evans/TWGJD_sample_ch04.pdf&#34;&gt;Chapter 4. Modern concurrency&lt;/a&gt;. Although I&amp;rsquo;m not relish with the code style (using trailing underscore to emphasize method parameters - why?) this chapter definitely deserves to read it.&lt;/p&gt;

&lt;p&gt;Footnotes:&lt;/p&gt;

&lt;p&gt;* &lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html&#34;&gt;JLS. Chapter 17. Threads and Locks&lt;/a&gt; assures that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All actions in a thread happen-before any other thread successfully returns from a join() on that thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the truth is that thread actions happens-before Thread.join().&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>