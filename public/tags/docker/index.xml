<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Dev notes</title>
    <link>https://dddpaul.github.io/blog/tags/docker/</link>
    <description>Recent content in Docker on Dev notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Nov 2016 21:00:00 +0300</lastBuildDate>
    <atom:link href="https://dddpaul.github.io/blog/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Træfik on Docker Swarm mode cluster</title>
      <link>https://dddpaul.github.io/blog/2016/11/07/traefik-on-docker-swarm/</link>
      <pubDate>Mon, 07 Nov 2016 21:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/11/07/traefik-on-docker-swarm/</guid>
      <description>&lt;p&gt;Træfɪk is a modern HTTP reverse proxy and load balancer made to deploy microservices with ease. Since 1.1.0-rc1 it supports Docker Swarm mode as backend. It means that Træfɪk will automatically create proxying frontends which will be binded to corresponding Docker Swarm services.&lt;/p&gt;

&lt;p&gt;This post is based on &lt;a href=&#34;https://docs.traefik.io/user-guide/swarm-mode/&#34;&gt;Docker Swarm (mode) cluster&lt;/a&gt; example.&lt;/p&gt;

&lt;p&gt;Assuming we have Docker Swarm mode cluster already, we will need to create an overlay network:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker network create --driver&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;overlay traefik-net
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Backends are the simple &lt;a href=&#34;https://github.com/emilevauge/whoamI&#34;&gt;emilevauge/whoami&lt;/a&gt; services:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker service create --name test1 --label traefik.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; --network traefik-net emilevauge/whoami
docker service create --name test2 --label traefik.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; --network traefik-net emilevauge/whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Træfɪk itself may be ran in rich variety of configurations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; HTTP only proxy&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker service create &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--name traefik &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--constraint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;node.role&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;manager &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--publish 80:80 --publish 8080:8080 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--network traefik-net &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
traefik:v1.1.0-rc3 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.swarmmode &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.domain&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.watch &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--logLevel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;DEBUG &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remarks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Træfɪk web UI will we accessible on &lt;a href=&#34;http://example.org:8080&#34;&gt;http://example.org:8080&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Debug log level must be disabled on production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; HTTPS proxy with Let&amp;rsquo;s Encrypt certificate and HTTP to HTTPS redirection&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker service create &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--name traefik &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--constraint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;node.role&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;manager &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--publish 80:80 --publish 443:443 --publish 8080:8080 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,readonly &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/tmp,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/acme &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--network traefik-net &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
traefik:v1.1.0-rc3 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--entryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name:http Address::80 Redirect.EntryPoint:https&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--entryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name:https Address::443 TLS&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--defaultEntryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http,https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.entryPoint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.email&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;owner@example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.storage&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/acme/acme.json &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.domains&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.onHostRule&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.swarmmode &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.domain&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.watch &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; HTTPS-only proxy with Let&amp;rsquo;s Encrypt certificate&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker service create &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--name traefik &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--constraint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;node.role&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;manager &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--publish 443:443 --publish 8080:8080 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,readonly &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/tmp,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/acme &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--network traefik-net &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
traefik:v1.1.0-rc3 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--entryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name:https Address::443 TLS&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--defaultEntryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.entryPoint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.email&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;owner@example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.storage&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/acme/acme.json &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.domains&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.onHostRule&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.swarmmode &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.domain&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.watch &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--logLevel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;DEBUG &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; HTTPS-only proxy with Let&amp;rsquo;s Encrypt certificate and HTTPS web UI&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker service create &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--name traefik &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--constraint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;node.role&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;manager &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--publish 443:443 --publish 8443:8443 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,readonly &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/pki/realms/domain,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/tls,readonly &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--mount &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt;,source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/tmp,target&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/acme &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--network traefik-net &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
traefik:v1.1.0-rc3 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--entryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name:https Address::443 TLS:/etc/traefik/tls/default.crt,/etc/traefik/tls/default.key&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--defaultEntryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.entryPoint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.email&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;owner@example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.storage&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/acme/acme.json &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.domains&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.onHostRule&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.swarmmode &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.domain&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--docker.watch &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--logLevel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;DEBUG &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--web.address&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;:8443 &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--web.certfile&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/tls/default.crt &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--web.keyfile&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/traefik/tls/default.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; For debugging purposes you can run Træfɪk without Docker&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;traefik -d &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--entryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name:http Address::8080 Redirect.EntryPoint:https&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--entryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name:https Address::8443 TLS&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--defaultEntryPoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http,https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.entryPoint&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.email&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;owner@example.org &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.storage&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;acme.json &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--acme.domains&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;example.org
--logLevel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;DEBUG &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
--web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://traefik.io/&#34;&gt;Træfɪk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker registry on Centos 7</title>
      <link>https://dddpaul.github.io/blog/2016/11/02/docker-registry/</link>
      <pubDate>Wed, 02 Nov 2016 09:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/11/02/docker-registry/</guid>
      <description>&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create logical volumes for &lt;code&gt;direct-lvm&lt;/code&gt; production mode&lt;/p&gt;

&lt;p&gt;Assume that we have 40 GByte block device named as &lt;code&gt;/dev/sdb&lt;/code&gt; with one full-size Linux partition on it.&lt;/p&gt;

&lt;p&gt;Official &lt;a href=&#34;https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/&#34;&gt;Device Mapper storage driver guide&lt;/a&gt; recommends to use &lt;a href=&#34;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Logical_Volume_Manager_Administration/thinprovisioned_volumes.html&#34;&gt;thin pools&lt;/a&gt; now. Use these commands to create thin-provisioned logical volumes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pvcreate /dev/sdb1                 &lt;span class=&#34;c&#34;&gt;# Create physical volume&lt;/span&gt;
vgcreate docker /dev/sdb1          &lt;span class=&#34;c&#34;&gt;# Create volume group and add this physical volume to it&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Create logical volumes&lt;/span&gt;
lvcreate --wipesignatures y -n data docker -l 40%VG
lvcreate --wipesignatures y -n registry docker -l 40%VG
lvcreate --wipesignatures y -n metadata docker -l 2%VG
&lt;span class=&#34;c&#34;&gt;# Convert data volume to thin pool&amp;#39;s data volume&lt;/span&gt;
lvconvert -y --zero n -c 512K --thinpool docker/data --poolmetadata docker/metadata
&lt;span class=&#34;c&#34;&gt;# Set thin pool autoextend features&lt;/span&gt;
cat &amp;gt; /etc/lvm/profile/docker-data.profile
activation &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;thin_pool_autoextend_threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 80
        &lt;span class=&#34;nv&#34;&gt;thin_pool_autoextend_percent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 20
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
lvchange --metadataprofile docker-data docker/data
&lt;span class=&#34;c&#34;&gt;# Check thin pool volume (must be monitored) &lt;/span&gt;
lvs -o+seg_monitor
  LV       VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert Monitor
  root     centos -wi-ao---- 117,19g
  swap     centos -wi-ao----   1,95g
  data     docker twi-a-t---  16,00g             0,00   0,01                             monitored
  registry docker -wi-a-----  16,00g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or if you do not trust thin pools use more traditional (but deprecated in Docker) way:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pvcreate /dev/sdb1                 &lt;span class=&#34;c&#34;&gt;# Create physical volume&lt;/span&gt;
vgcreate docker /dev/sdb1          &lt;span class=&#34;c&#34;&gt;# Create volume group and add this physical volume to it&lt;/span&gt;
lvcreate -L 2G -n metadata docker  &lt;span class=&#34;c&#34;&gt;# Create logical volume for Docker metadata&lt;/span&gt;
lvcreate -L 15G -n data docker     &lt;span class=&#34;c&#34;&gt;# Create logical volume for Docker data (layers, containers etc)&lt;/span&gt;
lvcreate -L 15G -n registry docker &lt;span class=&#34;c&#34;&gt;# Create logical volume for Docker Registry data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mount volume for Docker registry:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkfs.xfs /dev/docker/registry
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;/dev/docker/registry /var/lib/docker-registry    xfs     defaults        1 3&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fstab 
mount -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsblk
NAME                             MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda                                8:0    0   120G  0 disk
├─sda1                             8:1    0   876M  0 part /boot
└─sda2                             8:2    0 119,1G  0 part
  ├─centos-swap                  253:0    0     2G  0 lvm  [SWAP]
  └─centos-root                  253:1    0 117,2G  0 lvm  /
sdb                                8:16   0    40G  0 disk
└─sdb1                             8:17   0    40G  0 part
  ├─docker-metadata              253:2    0     2G  0 lvm
  │ └─docker-253:1-23762136-pool 253:5    0    15G  0 dm
  ├─docker-data                  253:3    0    15G  0 lvm
  │ └─docker-253:1-23762136-pool 253:5    0    15G  0 dm
  └─docker-registry              253:4    0    15G  0 lvm  /var/lib/docker-registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Configure Docker daemon&lt;/p&gt;

&lt;p&gt;Create systemd drop-in file:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p /etc/systemd/system/docker.service.d
cat &amp;gt; /etc/systemd/system/docker.service.d/env.conf 
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Service&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;EnvironmentFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-/etc/sysconfig/docker
&lt;span class=&#34;nv&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/dockerd &lt;span class=&#34;nv&#34;&gt;$OPTIONS&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DOCKER_NETWORK_OPTIONS&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DOCKER_STORAGE_OPTIONS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Specify Docker configuration:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &amp;gt; /etc/sysconfig/docker 
&lt;span class=&#34;nv&#34;&gt;OPTIONS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;--iptables=false&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DOCKER_NETWORK_OPTIONS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DOCKER_STORAGE_OPTIONS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;--storage-driver=devicemapper --storage-opt dm.datadev=/dev/docker/data --storage-opt dm.metadatadev=/dev/docker/metadata&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Check:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;systemctl daemon-reload
systemctl show docker &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep EnvironmentFile
&lt;span class=&#34;nv&#34;&gt;EnvironmentFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/sysconfig/docker &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ignore_errors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;yes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And run:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;systemctl &lt;span class=&#34;nb&#34;&gt;enable &lt;/span&gt;docker
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Check again:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker info &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep data
 Data file: /dev/docker/data
 Metadata file: /dev/docker/metadata
 Metadata Space Used: &lt;span class=&#34;m&#34;&gt;639&lt;/span&gt; kB
 Metadata Space Total: 2.147 GB
 Metadata Space Available: 2.147 GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Obtain SSL certificate from Let&amp;rsquo;s Encrypt&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s can be done by different ways, see &lt;a href=&#34;https://dddpaul.github.io/blog/2016/10/20/lego-nginx/&#34;&gt;Let&amp;rsquo;s Encrypt with lego and Nginx&lt;/a&gt; for one of these.&lt;/p&gt;

&lt;p&gt;Assume that certificate and key was obtained and stored in &lt;code&gt;/etc/pki/tls/lego/certificates&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Run Docker registry container as systemd unit&lt;/p&gt;

&lt;p&gt;Create systemd unit:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &amp;gt; /etc/systemd/system/docker-registry.service
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Unit&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;Description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Docker registry container
&lt;span class=&#34;nv&#34;&gt;Requires&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;docker.service
&lt;span class=&#34;nv&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;docker.service

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Service&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;Restart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;always
&lt;span class=&#34;nv&#34;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/docker create -p 5000:5000 -v /var/lib/docker-registry:/var/lib/registry -v /etc/pki/tls/lego/certificates:/certs -e &lt;span class=&#34;nv&#34;&gt;REGISTRY_HTTP_TLS_CERTIFICATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/certs/example.org.crt -e &lt;span class=&#34;nv&#34;&gt;REGISTRY_HTTP_TLS_KEY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/certs/example.org.key --name registry registry:2
&lt;span class=&#34;nv&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/docker start -a registry
&lt;span class=&#34;nv&#34;&gt;ExecStop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/docker stop -t &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; registry
&lt;span class=&#34;nv&#34;&gt;ExecStopPost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/docker rm registry

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Install&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;WantedBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Permit access to Docker registry only from trusted networks&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;firewall-cmd --zone&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;trusted --add-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;5000/tcp --permanent
firewall-cmd --zone&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;trusted --add-source&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.1.0/24 --permanent
firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Since Docker daemon was launched with &lt;code&gt;--iptables=false&lt;/code&gt; option, Docker registry port may be accessed from trusted networks only.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/admin/systemd/&#34;&gt;Control and configure Docker with systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/&#34;&gt;Docker and the Device Mapper storage driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trainingdevops.com/insights-and-tutorials/deploying-docker-registry-with-let-s-encrypt-ssl-tls-certs&#34;&gt;Deploying Docker Registry with Let&amp;rsquo;s Encrypt SSL/TLS Certs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker network and Swarm mode links</title>
      <link>https://dddpaul.github.io/blog/2016/08/02/docker-network-swarm-links/</link>
      <pubDate>Tue, 02 Aug 2016 15:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/08/02/docker-network-swarm-links/</guid>
      <description>&lt;p&gt;Some useful articles &amp;amp; videos about modern networking in Docker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/libnetwork/blob/master/docs/macvlan.md&#34;&gt;Macvlan Driver&lt;/a&gt; - Docker Macvlan driver is out of experimental in Docker 1.12.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://networkstatic.net/configuring-macvlan-ipvlan-linux-networking/&#34;&gt;Configuring Macvlan and Ipvlan Linux Networking&lt;/a&gt; - What Docker Macvlan driver does under the hood.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lowescott/2016-dnf-materials&#34;&gt;Materials for 2016 DevOps Networking Forum (DNF) Presentation&lt;/a&gt; - Slides about Docker networking with Ansible playbooks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://habrahabr.ru/company/badoo/blog/304702/&#34;&gt;Видео докладов с Docker митапа&lt;/a&gt; - Особо интересен доклад Константина Назарова &amp;ldquo;Каждому контейнеру по IP&amp;rdquo; (на русском).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Swarm mode was presented in Docker 1.12:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.docker.com/2016/07/docker-built-in-orchestration-ready-for-production-docker-1-12-goes-ga/&#34;&gt;Docker Built-In Orchestration Ready For Production: Docker 1.12 Goes GA&lt;/a&gt; - Post from Docker blog about Swarm mode release. It contains some links to the videos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hypriot.com/post/more-microservice-bliss-with-docker-1-12/&#34;&gt;More Microservices Bliss with Docker 1.12 and Swarm only&lt;/a&gt; - Seems like &lt;a href=&#34;https://traefik.io/&#34;&gt;Traefik&lt;/a&gt; can be partially replaced with Docker 1.12. routing mesh.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Запуск контейнеров с помощью Fig</title>
      <link>https://dddpaul.github.io/blog/2015/01/12/docker-fig/</link>
      <pubDate>Mon, 12 Jan 2015 10:42:00 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/12/docker-fig/</guid>
      <description>

&lt;p&gt;Это третья статья цикла 
&lt;a href=&#39;https://dddpaul.github.io/blog//series/building-test-environments-with-docker/&#39;&gt;Building test environments with Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Как мы уже убедились, запуск контейнеров с помощью &lt;code&gt;docker run&lt;/code&gt; — занятие весьма муторное, т.к. необходимо указывать множество опций. При запуске же нескольких контейнеров ситуация только ухудшается, т.к. теперь нужно задавать имена и линки.&lt;/p&gt;

&lt;p&gt;Эту проблему решает инструмент &lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt;, который может запустить/остановить целое тестовое окружение, состоящее из набора контейнеров. Описание контейнеров задано в YAML-файле. Таким образом, этот YAML-файл представляет собой конфигурацию тестового окружения.&lt;/p&gt;

&lt;p&gt;Конфигурация нашего тестового окружения &lt;em&gt;test-env/fig.yml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app1:
  image: smile/app1
  ports: [&#39;2021:22&#39;, &#39;8081:80&#39;]
  privileged: true

app2:
  image: smile/app2
  ports: [&#39;2022:22&#39;, &#39;8082:80&#39;]
  privileged: true

gate:
  image: smile/gate
  links: [app1, app2]
  ports: [&#39;2020:22&#39;, &#39;80:80&#39;]
  privileged: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запуск тестового окружения (находясь в каталоге с файлом &lt;em&gt;fig.yml&lt;/em&gt;): &lt;code&gt;fig up&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;По-умолчанию, Fig захватывает консоль и мультиплексирует вывод всех контейнеров. Для запуска в detached mode нужно использовать опцию &lt;code&gt;-d&lt;/code&gt;. Посмотреть вывод контейнеров в этом режиме можно с помощью команды &lt;code&gt;fig logs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Статус тестового окружения: &lt;code&gt;fig ps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Остановка тестового окружения: &lt;code&gt;fig stop&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;запуск-тестового-окружения-с-помощью-upstart:d4c1615d910942891ab8ffffd8a5f2e3&#34;&gt;Запуск тестового окружения с помощью Upstart&lt;/h3&gt;

&lt;p&gt;Job &lt;em&gt;/etc/init/fig-test-env.conf&lt;/em&gt; создан на основе &lt;a href=&#34;https://gist.github.com/HeyImAlex/9649374&#34;&gt;HeyImAlex/fig.conf&lt;/a&gt;. Для отключения автостарта нужно закомментировать вторую строчку (&amp;ldquo;start on &amp;hellip;&amp;rdquo;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;description &amp;quot;Test environment runner&amp;quot;
start on filesystem and started docker
stop on runlevel [!2345]
respawn
chdir /path/to/test-env
script
  # Wait for docker to finish starting up first.
  FILE=/var/run/docker.sock
  while [ ! -e $FILE ] ; do
    inotifywait -t 2 -e create $(dirname $FILE)
  done
  /usr/local/bin/fig up
end script
post-stop script
 /usr/local/bin/fig stop
end script
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь можно запустить тестовое окружение из любого места командой &lt;code&gt;start fig-test-env&lt;/code&gt;, а остановить — &lt;code&gt;stop fig-test-env&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Связывание контейнеров</title>
      <link>https://dddpaul.github.io/blog/2015/01/08/docker-linking/</link>
      <pubDate>Thu, 08 Jan 2015 13:49:06 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/08/docker-linking/</guid>
      <description>&lt;p&gt;Это вторая статья цикла 
&lt;a href=&#39;https://dddpaul.github.io/blog//series/building-test-environments-with-docker/&#39;&gt;Building test environments with Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;При создании тестовых окружений из нескольких контейнеров неизбежно возникает задача их взаимного связывания. Набивший оскомину пример: контейнеру с приложением нужен контейнер БД. В нашем же случае, контейнеру с балансером нужны контейнеры с апстримами.&lt;/p&gt;

&lt;p&gt;Статья &lt;a href=&#34;https://docs.docker.com/userguide/dockerlinks/&#34;&gt;Linking Containers Together&lt;/a&gt; полностью раскрывает вопрос линковки контейнеров. Осветим вкратце лишь основные моменты:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;каждый контейнер необходимо как-то назвать с помощью опции &lt;code&gt;--name&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;ссылка на контейнер-зависимость обозначается опцией &lt;code&gt;--link&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;в итоге, внутри зависимого контейнера, инициализируется множество переменных окружения, содержащих параметры контейнера-зависимости, а также в &lt;em&gt;/etc/hosts&lt;/em&gt; заносится IP-адрес контейнера-зависимости.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Например, так выглядит последовательный запуск 3-х контейнеров, причем 3-й зависит от первых двух:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --privileged -p 2021:22 -p 8081:80 --name app1 smile/tomcat7
docker run -d --privileged -p 2022:22 -p 8082:80 --name app2 smile/tomcat7
docker run -d --privileged -p 2020:22 -p 80:80 --name gate --link app1:app1 --link app2:app2 smile/gate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для проверки можно использовать вывод &lt;code&gt;docker inspect&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker inspect -f &amp;quot;{{ .HostConfig.Links }}&amp;quot; gate

[/app1:/gate/app1 /app2:/gate/app2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Опция &lt;code&gt;-d (detach mode)&lt;/code&gt; здесь необходима, чтобы контейнеры запускались в фоновом режиме и не захватывали консоль.&lt;/p&gt;

&lt;p&gt;Теперь, если зайти в контейнер gate (&lt;code&gt;ssh -p 2020 root@localhost&lt;/code&gt;) и посмотреть переменные окружения, то будет ясно, что gate &amp;ldquo;видит&amp;rdquo; exposed-порты и IP-адрес контейнера-зависимости:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@aba982937531:~# env | grep APP1
APP1_NAME=/gate/app1
APP1_PORT_22_TCP=tcp://172.17.0.28:22
APP1_PORT_80_TCP=tcp://172.17.0.28:80
APP1_PORT_22_TCP_ADDR=172.17.0.28
APP1_PORT_80_TCP_ADDR=172.17.0.28
APP1_PORT_22_TCP_PORT=22
APP1_PORT_80_TCP_PORT=80
APP1_PORT_80_TCP_PROTO=tcp
APP1_PORT_22_TCP_PROTO=tcp
APP1_PORT=tcp://172.17.0.28:22
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Еще лучше дела обстоят с &lt;em&gt;/etc/hosts&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@aba982937531:~# grep app1 /etc/hosts
172.17.0.28	app1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Модификация &lt;em&gt;/etc/hosts&lt;/em&gt;, например, дает возможность писать следующие кофиги Nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen 80 default_server;
    server_name _;

    location /app1 {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #
        proxy_pass http://app1:80/app1;                              # app1 host here
        proxy_redirect http://127.0.0.1:8081/app1 /app1;             #
    }

    location /app2 {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #
        proxy_pass http://app2:80/app2;                              # and app2 host here
        proxy_redirect http://127.0.0.1:8082/app2 /app2;             #
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Таким образом, в первом приближении, встроенная возможность связывания контейнеров в Docker решает наши проблемы.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Подготовка и запуск docker-контейнеров</title>
      <link>https://dddpaul.github.io/blog/2015/01/04/docker-prepare/</link>
      <pubDate>Sun, 04 Jan 2015 13:49:06 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/04/docker-prepare/</guid>
      <description>

&lt;p&gt;Это первая статья цикла 
&lt;a href=&#39;https://dddpaul.github.io/blog//series/building-test-environments-with-docker/&#39;&gt;Building test environments with Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Сразу оговорюсь, что все docker-контейнеры основаны на &lt;a href=&#34;http://phusion.github.io/baseimage-docker/&#34;&gt;baseimage-docker&lt;/a&gt;. Этот образ позволяет запускать в контейнере несколько приложений с помощью супервизора &lt;a href=&#34;http://smarden.org/runit/&#34;&gt;runit&lt;/a&gt; и содержит ssh, cron, syslog &amp;ldquo;из коробки&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Хотя подобный подход &lt;a href=&#34;http://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/&#34;&gt;не рекомендуется разработчиками Docker&lt;/a&gt;, он очень удобен в эксплуатации и не принуждает разработчика к своему &amp;ldquo;proper way&amp;rdquo;. Всегда можно использовать канонический подход от Docker с volumes и nsenter, а, при желании, подключаться к контейнерам по ssh.&lt;/p&gt;

&lt;p&gt;Кроме того, я привык использовать сервера приложений в связке с nginx, и baseimage-docker позволяет легко это сделать.&lt;/p&gt;

&lt;h3 id=&#34;базовый-образ:4df06129fe4804053dfd65ac4e205d9e&#34;&gt;Базовый образ&lt;/h3&gt;

&lt;p&gt;При создании базового образа выполняются две вещи:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;публичный ssh-ключ добавляется в список разрешенных для суперпользователя контейнера;&lt;/li&gt;
&lt;li&gt;задается локаль.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Dockerfile&lt;/em&gt; базового образа:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM phusion/baseimage:0.9.15

# Add public SSH keys
ADD my_rsa_public_key /tmp/my_rsa_public_key
RUN cat /tmp/my_rsa_public_key &amp;gt;&amp;gt; /root/.ssh/authorized_keys &amp;amp;&amp;amp; rm -f /tmp/my_rsa_public_key

# Locale
ENV LANG=en_US.utf8

# Use baseimage-docker&#39;s init system
CMD [&amp;quot;/sbin/my_init&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Свой публичный ssh-ключ, естественно, надо положить в &lt;em&gt;my_rsa_public_key&lt;/em&gt; рядом с &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Сборка: &lt;code&gt;docker build -t smile/base .&lt;/code&gt; и запуск:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -it -p 2022:22 smile/base /sbin/my_init -- bash -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; используется для удаления контейнера после его остановки, &lt;code&gt;-it&lt;/code&gt; — для терминального интеракивного режима, а &lt;code&gt;-- bash -l&lt;/code&gt; — для запуска шелла после запуска всех сервисов.&lt;/p&gt;

&lt;p&gt;Также на контейнер можно зайти по ssh: &lt;code&gt;ssh -p 2022 root@localhost&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;образ-с-nginx:4df06129fe4804053dfd65ac4e205d9e&#34;&gt;Образ с nginx&lt;/h3&gt;

&lt;p&gt;Сборка &lt;a href=&#34;https://github.com/dddpaul/docker-nginx&#34;&gt;docker-nginx&lt;/a&gt;: &lt;code&gt;docker build -t smile/nginx .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Основная особенность этого образа в том, что при запуске контейнера отключается IPv6.&lt;/p&gt;

&lt;p&gt;Сделано это для того, чтобы обойти известную проблему с проксированием Nginx. Т.к. демон висит на tcp6, то апстрим иногда видит запрос от 127.0.0.1, а иногда от 0:0:0:0:0:0:0:1. Это принуждает к изменению ACL на сервере приложений, что не всегда удобно.&lt;/p&gt;

&lt;p&gt;IPv6 отключается после выполнения серии sysctl-команд, которые требуют, чтобы контейнер был запущен в привилегированном режиме, т.е. команда запуска слегка усложняется:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged --rm -it -p 2022:22 smile/nginx /sbin/my_init -- bash -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;остальные-образы:4df06129fe4804053dfd65ac4e205d9e&#34;&gt;Остальные образы&lt;/h3&gt;

&lt;p&gt;На основе docker-nginx можно строить более сложные образы, такие как &lt;a href=&#34;https://github.com/dddpaul/docker-java7-server&#34;&gt;docker-java7-server&lt;/a&gt; и  &lt;a href=&#34;https://github.com/dddpaul/docker-tomcat7&#34;&gt;docker-tomcat7&lt;/a&gt;. На основе последнего уже строятся образы для конечных приложений.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>