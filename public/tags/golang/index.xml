<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Pavel Derendyaev notes</title>
    <link>https://dddpaul.github.io/blog/tags/golang/</link>
    <description>Recent content in golang on Pavel Derendyaev notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Aug 2016 17:45:00 +0300</lastBuildDate>
    
	<atom:link href="https://dddpaul.github.io/blog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple Netcat tool written in Go</title>
      <link>https://dddpaul.github.io/blog/2016/08/30/gonc/</link>
      <pubDate>Tue, 30 Aug 2016 17:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/08/30/gonc/</guid>
      <description>It&amp;rsquo;s spectacularly simple to implement TCP Netcat in Go thanks to io.Copy.
type Progress struct { bytes uint64 } func TransferStreams(con net.Conn) { c := make(chan Progress) // Read from Reader and write to Writer until EOF 	copy := func(r io.ReadCloser, w io.WriteCloser) { defer func() { r.Close() w.Close() }() n, _ := io.Copy(w, r) c &amp;lt;- Progress{bytes: uint64(n)} } go copy(con, os.Stdout) go copy(os.Stdin, con) p := &amp;lt;-c log.</description>
    </item>
    
    <item>
      <title>Golang profiling links</title>
      <link>https://dddpaul.github.io/blog/2016/07/15/golang-profiling-links/</link>
      <pubDate>Fri, 15 Jul 2016 15:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/07/15/golang-profiling-links/</guid>
      <description>Some useful articles &amp;amp; videos about profiling &amp;amp; benchmarking Go programs:
 Go Benchmarks - How to write and use benchmarks Introducing profile, super simple profiling for Go programs - A simple way to profile an existing Go program. Performance and memory analysis of Golang programs - Performance metrics analysis. Профилирование в Go (гостевой пост Владимира Солонина) - Доступно о профилировании на русском. Видео докладов с Весеннего Go митапа - Особо интересен доклад Марко Кеваца о профилировании (на русском).</description>
    </item>
    
    <item>
      <title>Дистанционное управление Motion с помощью Go</title>
      <link>https://dddpaul.github.io/blog/2014/11/14/motion-remote-control/</link>
      <pubDate>Fri, 14 Nov 2014 16:04:00 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/11/14/motion-remote-control/</guid>
      <description>Цель — сделать удобное управление для сервачка с системой motion detection. В качестве сервера пригодился классический нетбук Asus Eee PC 701 4-х гигабайтным SSD на борту. На него была установлена Ubuntu 14.04.
Задачи:
 Собственно, motion detection (для этого был использован Motion). Управление настройками Motion через ИК-пульт. Вывод всех сообщений от Motion и сигналов от пульта на консоль (/dev/tty1). Минимальное время работы экрана (быстрый переход в энергосберегающйй режим, просыпание по сигналу от пульта).</description>
    </item>
    
    <item>
      <title>First note</title>
      <link>https://dddpaul.github.io/blog/2014/07/28/oldest/</link>
      <pubDate>Mon, 28 Jul 2014 12:00:00 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/07/28/oldest/</guid>
      <description>This blog is based on Hugo - static site generator written on Go. GitHub interaction is organized with use of Hosting on GitHub Pages tutorial. See &amp;ldquo;Configure git Workflow&amp;rdquo; section specifically.
And for all of the git 1.7.x (and older) users - you can grab git-subtree from contrib directory of Git repo. I&amp;rsquo;ve used git-subtree from latest 1.8.x. It&amp;rsquo;s just a shell script, run make, chmod +x git-subtree and copy it to /usr/lib/git-core.</description>
    </item>
    
  </channel>
</rss>