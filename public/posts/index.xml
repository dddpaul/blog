<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pavel Derendyaev notes</title>
    <link>https://dddpaul.github.io/blog/posts/</link>
    <description>Recent content in Posts on Pavel Derendyaev notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Jun 2018 18:13:44 +0300</lastBuildDate>
    
	<atom:link href="https://dddpaul.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kafka tips &amp; tricks</title>
      <link>https://dddpaul.github.io/blog/2018/06/23/kafka-tips/</link>
      <pubDate>Sat, 23 Jun 2018 18:13:44 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2018/06/23/kafka-tips/</guid>
      <description>Список консьюмер-групп
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --list  Информация по консьюмер-группе
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --group id1 --describe  Установка оффсета на начало
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --topic topic --group id1 --reset-offsets --to-earliest --execute  Установка оффсета на конец
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --topic topic --group id1 --reset-offsets --to-latest --execute  Установка оффсета на дату-время
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --topic topic --group id1 --reset-offsets --to-datetime &amp;quot;2017-12-22T00:00:00.</description>
    </item>
    
    <item>
      <title>Backend stories meetup в Альфа-Банке</title>
      <link>https://dddpaul.github.io/blog/2018/06/22/alfabank-java-meetup-1/</link>
      <pubDate>Fri, 22 Jun 2018 22:55:13 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2018/06/22/alfabank-java-meetup-1/</guid>
      <description>21 июня прошел Java-митап Backend stories в Альфа-банке.
Доклады:
 Kotlin: выходим за рамки JVM Testcontainers: Oracle inside Как жить, если вы неправильно готовите Elasticsearch  Также есть запись трансляции.</description>
    </item>
    
    <item>
      <title>MySQL to PostgreSQL migration</title>
      <link>https://dddpaul.github.io/blog/2016/11/13/mysql-to-postgresql-migration/</link>
      <pubDate>Sun, 13 Nov 2016 12:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/11/13/mysql-to-postgresql-migration/</guid>
      <description>Install migration Ruby gem and run it:
gem install mysql2psql mysql2psql  Update database credentials in generated mysql2psql.yml file:
mysql: database: redmine hostname: localhost port: 3306 username: redmine password: xxxxxxx encoding: utf8 destination: # if file is given, output goes to file, else postgres file: /tmp/redmine-pg.sql postgres: hostname: localhost port: 5432 username: mysql2psql password: database: mysql2psql_test  Run command again:
mysql2psql  Links:
 How to migrate from MySQL to PostgreSQL  </description>
    </item>
    
    <item>
      <title>Træfik on Docker Swarm mode cluster</title>
      <link>https://dddpaul.github.io/blog/2016/11/07/traefik-on-docker-swarm/</link>
      <pubDate>Mon, 07 Nov 2016 21:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/11/07/traefik-on-docker-swarm/</guid>
      <description>Træfɪk is a modern HTTP reverse proxy and load balancer made to deploy microservices with ease. Since 1.1.0-rc1 it supports Docker Swarm mode as backend. It means that Træfɪk will automatically create proxying frontends which will be binded to corresponding Docker Swarm services.
This post is based on Docker Swarm (mode) cluster example.
Assuming we have Docker Swarm mode cluster already, we will need to create an overlay network:
docker network create --driver=overlay traefik-net Backends are the simple emilevauge/whoami services:</description>
    </item>
    
    <item>
      <title>Docker registry on Centos 7</title>
      <link>https://dddpaul.github.io/blog/2016/11/02/docker-registry/</link>
      <pubDate>Wed, 02 Nov 2016 09:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/11/02/docker-registry/</guid>
      <description>1. Create logical volumes for direct-lvm production mode
Assume that we have 40 GByte block device named as /dev/sdb with one full-size Linux partition on it.
Official Device Mapper storage driver guide recommends to use thin pools now. Use these commands to create thin-provisioned logical volumes:
pvcreate /dev/sdb1 # Create physical volume vgcreate docker /dev/sdb1 # Create volume group and add this physical volume to it # Create logical volumes lvcreate --wipesignatures y -n data docker -l 40%VG lvcreate --wipesignatures y -n registry docker -l 40%VG lvcreate --wipesignatures y -n metadata docker -l 2%VG # Convert data volume to thin pool&amp;#39;s data volume lvconvert -y --zero n -c 512K --thinpool docker/data --poolmetadata docker/metadata # Set thin pool autoextend features cat &amp;gt; /etc/lvm/profile/docker-data.</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt with lego and Nginx</title>
      <link>https://dddpaul.github.io/blog/2016/10/20/lego-nginx/</link>
      <pubDate>Thu, 20 Oct 2016 11:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/10/20/lego-nginx/</guid>
      <description>xenolf/lego it&amp;rsquo;s a feature-rich Let&amp;rsquo;s Encrypt client and ACME library written in Go.
1. Prepare Nginx server
server { listen 80 default; server_name example.org www.example.org; location /.well-known/acme-challenge { proxy_pass http://127.0.0.1:81; proxy_set_header Host $host; } # Other directives }  2. Update ca-certificates for CentOS 5 (optional)
Let&amp;rsquo;s Encrypt CA certificate is not included into root CA bundle of old Linux distributions like RHEL/Centos 5. You have to replace this bundle manually with fresh one from cURL website:</description>
    </item>
    
    <item>
      <title>Выбор простого бэкапа для Windows</title>
      <link>https://dddpaul.github.io/blog/2016/09/07/windows-backup/</link>
      <pubDate>Wed, 07 Sep 2016 09:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/09/07/windows-backup/</guid>
      <description>Доступные и функциональные системы бэкапа под Windows.
Требования:
 Основное - использование жестких или символьных ссылок для дедупликации содержимого архива. Дополнительное - использование VSS (Volume Shadow Copy Service) для предварительного создания снэпшота.  Не рассматриваются сложные распределенные (и дорогие) системы бэкапа. Один компьютер, одна программа или скрипт.
Dublicati Duplicati is a free backup client that securely stores encrypted, incremental, compressed backups on cloud storage services and remote file servers. It works with Amazon S3, Windows Live SkyDrive, Google Drive (Google Docs), Rackspace Cloud Files or WebDAV, SSH, FTP (and many more).</description>
    </item>
    
    <item>
      <title>Simple Netcat tool written in Go</title>
      <link>https://dddpaul.github.io/blog/2016/08/30/gonc/</link>
      <pubDate>Tue, 30 Aug 2016 17:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/08/30/gonc/</guid>
      <description>It&amp;rsquo;s spectacularly simple to implement TCP Netcat in Go thanks to io.Copy.
type Progress struct { bytes uint64 } func TransferStreams(con net.Conn) { c := make(chan Progress) // Read from Reader and write to Writer until EOF 	copy := func(r io.ReadCloser, w io.WriteCloser) { defer func() { r.Close() w.Close() }() n, _ := io.Copy(w, r) c &amp;lt;- Progress{bytes: uint64(n)} } go copy(con, os.Stdout) go copy(os.Stdin, con) p := &amp;lt;-c log.</description>
    </item>
    
    <item>
      <title>Docker network and Swarm mode links</title>
      <link>https://dddpaul.github.io/blog/2016/08/02/docker-network-swarm-links/</link>
      <pubDate>Tue, 02 Aug 2016 15:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/08/02/docker-network-swarm-links/</guid>
      <description>Some useful articles &amp;amp; videos about modern networking in Docker:
 Macvlan Driver - Docker Macvlan driver is out of experimental in Docker 1.12. Configuring Macvlan and Ipvlan Linux Networking - What Docker Macvlan driver does under the hood. Materials for 2016 DevOps Networking Forum (DNF) Presentation - Slides about Docker networking with Ansible playbooks. Видео докладов с Docker митапа - Особо интересен доклад Константина Назарова &amp;ldquo;Каждому контейнеру по IP&amp;rdquo; (на русском).</description>
    </item>
    
    <item>
      <title>Golang profiling links</title>
      <link>https://dddpaul.github.io/blog/2016/07/15/golang-profiling-links/</link>
      <pubDate>Fri, 15 Jul 2016 15:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/07/15/golang-profiling-links/</guid>
      <description>Some useful articles &amp;amp; videos about profiling &amp;amp; benchmarking Go programs:
 Go Benchmarks - How to write and use benchmarks Introducing profile, super simple profiling for Go programs - A simple way to profile an existing Go program. Performance and memory analysis of Golang programs - Performance metrics analysis. Профилирование в Go (гостевой пост Владимира Солонина) - Доступно о профилировании на русском. Видео докладов с Весеннего Go митапа - Особо интересен доклад Марко Кеваца о профилировании (на русском).</description>
    </item>
    
    <item>
      <title>Быстрое погружение в React</title>
      <link>https://dddpaul.github.io/blog/2016/04/15/react-for-starters/</link>
      <pubDate>Fri, 15 Apr 2016 13:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/04/15/react-for-starters/</guid>
      <description>Для разогрева:
 React tutorial Курс на Хекслете  После этого более-менее должно оформиться понимание, что:
 React - это V в MVC; основа React - это компоненты; у компонента есть главный метод render(), который дергается React&amp;rsquo;ом, когда нужно отобразить или перерисовать компонент; компоненты инициализируется через properties, и хранят state; компоненты пишутся на JSX - специальный синтаксис, который &amp;ldquo;бесшовно&amp;rdquo; внедряет HTML в JS; компоненты можно связывать в иерархические структуры; состояние нельзя менять напрямую, а только через специальный метод setState() - таким образом React точно узнает, что состояние изменилось и объект надо перерисовать; состояние принято хранить в родительском компоненте, и передавать его в дочерние компоненты через properties.</description>
    </item>
    
    <item>
      <title>Linearizability, serializability, transaction isolation and consistency models</title>
      <link>https://dddpaul.github.io/blog/2016/03/17/linearizability-and-serializability/</link>
      <pubDate>Thu, 17 Mar 2016 11:00:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2016/03/17/linearizability-and-serializability/</guid>
      <description>Linearizability versus Serializability:
 Linearizability is a guarantee about single operations on single objects. It provides a real-time (i.e., wall-clock) guarantee on the behavior of a set of single operations (often reads and writes) on a single object (e.g., distributed register or data item).
Linearizability for read and write operations is synonymous with the term “atomic consistency” and is the “C,” or “consistency,” in Gilbert and Lynch’s proof of the CAP Theorem.</description>
    </item>
    
    <item>
      <title>Different URI encodings for one Tomcat-based application</title>
      <link>https://dddpaul.github.io/blog/2015/12/21/spring-boot-uri-encoding/</link>
      <pubDate>Mon, 21 Dec 2015 18:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/12/21/spring-boot-uri-encoding/</guid>
      <description>There some cases when you would like to map different URI encodings on different HTTP endpoints. And one of those cases is when your application handles GET requests containing percent-encoded non-ASCII data in different charsets. For example, one HTTP endpoint uses standard UTF-8 while the other uses Windows-1251.
Plain Tomcat way According to How do I change how GET parameters are interpreted? the only way to specify GET request encoding is to use by-connector URIEncoding attribute.</description>
    </item>
    
    <item>
      <title>Ansible: &#34;default&#34; and &#34;bool&#34; filters</title>
      <link>https://dddpaul.github.io/blog/2015/11/30/ansible-default-and-bool-filters/</link>
      <pubDate>Mon, 30 Nov 2015 10:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/11/30/ansible-default-and-bool-filters/</guid>
      <description>There are plenty of bool and default filters usage in Ansible playbooks and templates. For example, in debops/ansible-docker: when: docker_upstream| d() | bool.
Where docker_upstream is an YAML boolean: docker_upstream: False. It seems like &amp;ldquo;when&amp;rdquo; condition is overbloated again :)
The var | d() | bool construction is spread all over the place, for example, in docker config template:
{% if docker_listen | d() | bool %}  Where docker_listen is an YAML list: docker_listen: [ &#39;{{ docker_tcp_listen }}&#39; ].</description>
    </item>
    
    <item>
      <title>Ansible: &#34;defined&#34; keyword</title>
      <link>https://dddpaul.github.io/blog/2015/11/29/ansible-defined-keyword/</link>
      <pubDate>Sun, 29 Nov 2015 10:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/11/29/ansible-defined-keyword/</guid>
      <description>Some hidden knowledge for the start:
First of all, the Ansible when clause contains a Jinja2 expression (see Ansible playbook conditionals). It&amp;rsquo;s confirmed with a quote from Ansible: Up And Running, page 41:
 Ansible also uses the Jinja2 template engine to evaluate variables in playbooks.
 Secondly, that how Jinja2 interprets the if condition:
 The if statement in Jinja is comparable with the Python if statement. In the simplest form, you can use it to test if a variable is defined, not empty or not false.</description>
    </item>
    
    <item>
      <title>Bind interfaces to multiple zones with Firewalld on CentOS-7</title>
      <link>https://dddpaul.github.io/blog/2015/07/28/firewalld-zones/</link>
      <pubDate>Tue, 28 Jul 2015 10:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/07/28/firewalld-zones/</guid>
      <description>As you can expect from man firewall-cmd interface binding to zone other than default (public) could be achieved with the following command sequence:
firewall-cmd --zone public --remove-interface eth1 --permanent firewall-cmd --zone internal --add-interface eth1 --permanent firewall-cmd --reload  Seems like it&amp;rsquo;s done:
firewall-cmd --get-zone-of-interface=eth1 internal  But after firewalld restart or server reboot things aren&amp;rsquo;t so bright:
firewall-cmd --get-zone-of-interface=eth1 public  The reason is in this CentOS-7 bug. The only workaround is to specify zone in /etc/sysconfig/network-scripts/ifcfg-eth1 file:</description>
    </item>
    
    <item>
      <title>Тонкости использования аннотации @Value в Spring Boot</title>
      <link>https://dddpaul.github.io/blog/2015/07/12/spring-boot-value/</link>
      <pubDate>Sun, 12 Jul 2015 18:30:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/07/12/spring-boot-value/</guid>
      <description>Аннотация @Value - это самый простой способ для &amp;ldquo;впрыскивания&amp;rdquo; значений из конфигурации Spring Boot в код. При этом также можно задать значение по-умолчанию.
Однако, стоит учитывать, что резолвинг значения будет выполняться для каждой аннотации @Value. Например, если аннотировать @Value два поля (в одном или разных классах - не суть важно) вот так:
@Value(&amp;#34;${unique-param}&amp;#34;) private String param1; @Value(&amp;#34;${unique-param}&amp;#34;) private String param2; , то в debug-логе мы увидим:
TRACE 23601 --- [lication.main()] o.</description>
    </item>
    
    <item>
      <title>Логирование HTTP-запросов в Tomcat</title>
      <link>https://dddpaul.github.io/blog/2015/06/30/tomcat-http-logging/</link>
      <pubDate>Tue, 30 Jun 2015 13:27:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/06/30/tomcat-http-logging/</guid>
      <description>Apache Tomcat Request Dumper Filter Request Dumper Filter входит в состав Tomcat. Рассмотрим способы его конфигурации.
Spring Boot Достаточно поместить вот такой bean в класс, аннотированный @Configuration:
@Bean RequestDumperFilter requestDumper() { return new RequestDumperFilter(); } Вывод дампа запросов в отдельный лог здесь не рассматриваем.
Tomcat 7 Стандартный способ конфигурации фильтра — server.xml / context.xml / web.xml, в зависимости от того, какой scope нам нужен. Для логирования запросов в рамках одного приложения — web.</description>
    </item>
    
    <item>
      <title>RabbitMQ links</title>
      <link>https://dddpaul.github.io/blog/2015/05/15/rabbitmq-links/</link>
      <pubDate>Fri, 15 May 2015 08:27:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/05/15/rabbitmq-links/</guid>
      <description>RabbitMQ confirms, transactions, reply-to functionality and Spring integration:
 Using Spring AMQP Introducing Publisher Confirms Transaction support with RabbitMQ Confirms (aka Publisher Acknowledgements) Direct reply-to Remote procedure call (RPC) TxDontLoseMessages.java ConfirmDontLoseMessages.java RabbitMQ Spring tutorial &amp;amp; rabbitmq-examples  </description>
    </item>
    
    <item>
      <title>Java builders</title>
      <link>https://dddpaul.github.io/blog/2015/04/12/java-builders/</link>
      <pubDate>Sun, 12 Apr 2015 12:15:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/04/12/java-builders/</guid>
      <description>So it&amp;rsquo;s time to scrutinize a builder pattern. There are bunch of options to implement builder pattern in Java:
 classic builder; elegant builder; classic builder with IntelliJ IDEA plugin; Google AutoValue builder; Project Lombok builder; POJO builder; Immutables builder.  All of these variants have been examined in Java builders GitHub project.
The winners are (and this a tough IMHO):
 IDEA InnerBuilder plugin if you use builder class from frameworks like Spring/Spring MVC or Play.</description>
    </item>
    
    <item>
      <title>Oracle connectivity in Java</title>
      <link>https://dddpaul.github.io/blog/2015/02/14/oracle-connectivity/</link>
      <pubDate>Sat, 14 Feb 2015 22:11:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/02/14/oracle-connectivity/</guid>
      <description>A new small test project is intended to answer the question - what is the proper way to specify network timeout for database connection?
There so many ways in JDBC API:
 [CommonDataSource.setLoginTimeout](http://docs.oracle.com/javase/7/docs/api/javax/sql/CommonDataSource.html#setLoginTimeout(int)) [Connection.setNetworkTimeout](http://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html#setNetworkTimeout(java.util.concurrent.Executor,%20int)) [Statement.setQueryTimeout](http://docs.oracle.com/javase/7/docs/api/java/sql/Statement.html#setQueryTimeout(int))  And every database has it&amp;rsquo;s own non-standard ways in addition.
But these tests have been lead us to a single conclusion — you must specify network timeouts on driver level. All these JDBC stuff isn&amp;rsquo;t enough for Oracle database.</description>
    </item>
    
    <item>
      <title>Java network listeners</title>
      <link>https://dddpaul.github.io/blog/2015/02/01/java-listeners/</link>
      <pubDate>Sun, 01 Feb 2015 18:44:06 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/02/01/java-listeners/</guid>
      <description>I&amp;rsquo;ve written a small listeners library today. It allows to create Callables which can be submitted to ExecutorService. The callable itself implements creating server socket and binding it to local port.
There two principal type of listeners: blocking and non-blocking (thanks to Java NIO.
Blocking listener is very simple but in can&amp;rsquo;t be interrupted by calling thread. So there&amp;rsquo;s no point in that:
Future&amp;lt;Socket&amp;gt; future = executor.submit( Listeners.createListener( PORT ) ); try { Socket socket = future.</description>
    </item>
    
    <item>
      <title>List of memory leaks articles</title>
      <link>https://dddpaul.github.io/blog/2015/01/17/memory-leaks-articles/</link>
      <pubDate>Sat, 17 Jan 2015 22:35:49 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/17/memory-leaks-articles/</guid>
      <description>&amp;ldquo;Solving OutOfMemoryError&amp;rdquo; series from Nikita Salnikov-Tarnovsky and Vladimir Šor:
 Solving OutOfMemoryError (part 1) – story of a developer Solving OutOfMemoryError (part 2) – why didn’t operations solve it? Solving OutOfMemoryError (part 3) – where do you start? Solving OutOfMemoryError (part 4) – memory profilers Solving OutOfMemoryError (part 5) – JDK Tools Solving OutOfMemoryError (part 6) – Dump is not a waste  &amp;ldquo;Classloader leaks&amp;rdquo; series from Mattias Jiderhamn:
 Classloader leaks I – How to find classloader leaks with Eclipse Memory Analyser (MAT) Classloader leaks II – Find and work around unwanted references Classloader leaks III – “Die Thread, die!</description>
    </item>
    
    <item>
      <title>Запуск контейнеров с помощью Fig</title>
      <link>https://dddpaul.github.io/blog/2015/01/12/docker-fig/</link>
      <pubDate>Mon, 12 Jan 2015 10:42:00 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/12/docker-fig/</guid>
      <description>Это третья статья цикла Building test environments with Docker.
Как мы уже убедились, запуск контейнеров с помощью docker run — занятие весьма муторное, т.к. необходимо указывать множество опций. При запуске же нескольких контейнеров ситуация только ухудшается, т.к. теперь нужно задавать имена и линки.
Эту проблему решает инструмент Fig, который может запустить/остановить целое тестовое окружение, состоящее из набора контейнеров. Описание контейнеров задано в YAML-файле. Таким образом, этот YAML-файл представляет собой конфигурацию тестового окружения.</description>
    </item>
    
    <item>
      <title>Связывание контейнеров</title>
      <link>https://dddpaul.github.io/blog/2015/01/08/docker-linking/</link>
      <pubDate>Thu, 08 Jan 2015 13:49:06 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/08/docker-linking/</guid>
      <description>Это вторая статья цикла Building test environments with Docker.
При создании тестовых окружений из нескольких контейнеров неизбежно возникает задача их взаимного связывания. Набивший оскомину пример: контейнеру с приложением нужен контейнер БД. В нашем же случае, контейнеру с балансером нужны контейнеры с апстримами.
Статья Linking Containers Together полностью раскрывает вопрос линковки контейнеров. Осветим вкратце лишь основные моменты:
 каждый контейнер необходимо как-то назвать с помощью опции --name; ссылка на контейнер-зависимость обозначается опцией --link; в итоге, внутри зависимого контейнера, инициализируется множество переменных окружения, содержащих параметры контейнера-зависимости, а также в /etc/hosts заносится IP-адрес контейнера-зависимости.</description>
    </item>
    
    <item>
      <title>Подготовка и запуск docker-контейнеров</title>
      <link>https://dddpaul.github.io/blog/2015/01/04/docker-prepare/</link>
      <pubDate>Sun, 04 Jan 2015 13:49:06 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/04/docker-prepare/</guid>
      <description>Это первая статья цикла Building test environments with Docker.
Сразу оговорюсь, что все docker-контейнеры основаны на baseimage-docker. Этот образ позволяет запускать в контейнере несколько приложений с помощью супервизора runit и содержит ssh, cron, syslog &amp;ldquo;из коробки&amp;rdquo;.
Хотя подобный подход не рекомендуется разработчиками Docker, он очень удобен в эксплуатации и не принуждает разработчика к своему &amp;ldquo;proper way&amp;rdquo;. Всегда можно использовать канонический подход от Docker с volumes и nsenter, а, при желании, подключаться к контейнерам по ssh.</description>
    </item>
    
    <item>
      <title>Using method handles to get logger</title>
      <link>https://dddpaul.github.io/blog/2014/12/21/method-handle-logger/</link>
      <pubDate>Sun, 21 Dec 2014 13:36:15 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/12/21/method-handle-logger/</guid>
      <description>One more quote from The Well-Grounded Java Developer by Benjamin J. Evans and Martijn Verburg about useful feature of MethodHandle.
One additional feature that method handles provide is the ability to determine the current class from a static context. If you’ve ever written logging code (such as for log4j) that looked like this,
Logger lgr = LoggerFactory.getLogger(MyClass.class);  you know that this code is fragile. If it’s refactored to move into a superclass or subclass, the explicit class name would cause problems With Java 7, however, you can write this:</description>
    </item>
    
    <item>
      <title>Java Memory Model in few words</title>
      <link>https://dddpaul.github.io/blog/2014/12/06/jmm-1/</link>
      <pubDate>Sat, 06 Dec 2014 18:33:46 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/12/06/jmm-1/</guid>
      <description>This article is mostly consist of quotes from The Well-Grounded Java Developer by Benjamin J. Evans and Martijn Verburg. I like simplicity and brevity of their explanation approach.
And that&amp;rsquo;s how Happens-Before and Synchronizes-With relationships are explained.
 Happens-Before — This relationship indicates that one block of code fully completes before the other can start. Synchronizes-With — This means that an action will synchronize its view of an object with main memory before continuing.</description>
    </item>
    
    <item>
      <title>Дистанционное управление Motion с помощью Go</title>
      <link>https://dddpaul.github.io/blog/2014/11/14/motion-remote-control/</link>
      <pubDate>Fri, 14 Nov 2014 16:04:00 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/11/14/motion-remote-control/</guid>
      <description>Цель — сделать удобное управление для сервачка с системой motion detection. В качестве сервера пригодился классический нетбук Asus Eee PC 701 4-х гигабайтным SSD на борту. На него была установлена Ubuntu 14.04.
Задачи:
 Собственно, motion detection (для этого был использован Motion). Управление настройками Motion через ИК-пульт. Вывод всех сообщений от Motion и сигналов от пульта на консоль (/dev/tty1). Минимальное время работы экрана (быстрый переход в энергосберегающйй режим, просыпание по сигналу от пульта).</description>
    </item>
    
    <item>
      <title>Борьба с утечками памяти в Android (Badoo)</title>
      <link>https://dddpaul.github.io/blog/2014/10/21/android-memory-leak-badoo/</link>
      <pubDate>Tue, 21 Oct 2014 14:30:16 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/10/21/android-memory-leak-badoo/</guid>
      <description>На хабре появилась статья Борьба с утечками памяти в Android. Часть 1 от компании Badoo. Т.к. тема созвучна с моими постами из серии Memory leaks, то решил вкратце описать их методы.
Суть проблемы — использование android.os.Handler, в который постится анонимный Runnable с помощью метода [postDelayed](http://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable, long). Для демонстрации, Runnable просто меняет какой-либо TextView (т.е. содержит внутри себя ссылку mTextView), и время до выполнения Runnable берется довольно большим. Так вот, если за этот промежуток времени повернуть девайс несколько раз, то старые активити не будут собираться GC, т.</description>
    </item>
    
    <item>
      <title>Директивы AngularJS</title>
      <link>https://dddpaul.github.io/blog/2014/10/16/angularjs-directive/</link>
      <pubDate>Thu, 16 Oct 2014 11:26:00 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/10/16/angularjs-directive/</guid>
      <description>Статьи:
 AngularJS directive: Overview. Очень крутой сборник статей про директивы. Помогает понять, как правильно создать шаблон директивы вручную (через функции compile и link), а также, как навесить watches. AngularJS: $watch, $digest and $apply. Еще раз об этих базовых функциях AngularJS почитать никогда не вредно. A Practical Guide to AngularJS Directives - Part 1, Part 2. Подробно про директивы. Moving Data In An AngularJS Directive. Передача данных в директиву. Mastering the Scope of the Directives in AngularJS.</description>
    </item>
    
    <item>
      <title>Подводные камни смены ориентации в Android</title>
      <link>https://dddpaul.github.io/blog/2014/08/02/orientation-change/</link>
      <pubDate>Sat, 02 Aug 2014 13:32:33 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/08/02/orientation-change/</guid>
      <description>После нескольких дней отладки приложения пришел к выводу, что смена ориентации (rotation, orientation change) требует к себе особого внимания. Наконец-то я понял тех разработчиков, которые напрочь запрещают смену ориентации в своем софте. Ведь, не зная некоторых неочевидных нюансов, можно легко получить крах приложения или утечку памяти.
Опишу в порядке возрастания сложности, на какие подводные камни мне пришлось натолкнуться.
Beginner&amp;rsquo;s level Надо сохранять состояние (state) фрагментов. Не сохранил — потерял, т.</description>
    </item>
    
    <item>
      <title>Android memory leaks</title>
      <link>https://dddpaul.github.io/blog/2014/08/01/android-memory-leaks/</link>
      <pubDate>Fri, 01 Aug 2014 13:34:16 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/08/01/android-memory-leaks/</guid>
      <description>Articles:
 Avoiding memory leaks. This great article describes base causes of memory leaks on Android. I quote summary from there:
 Do not keep long-lived references to a context-activity (a reference to an activity should have the same life cycle as the activity itself) Try using the context-application instead of a context-activity Avoid non-static inner classes in an activity if you don&amp;rsquo;t control their life cycle, use a static inner class and make a weak reference to the activity inside.</description>
    </item>
    
    <item>
      <title>Multi-pane layout for tablets</title>
      <link>https://dddpaul.github.io/blog/2014/07/30/multi-pane/</link>
      <pubDate>Wed, 30 Jul 2014 07:14:41 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/07/30/multi-pane/</guid>
      <description>Some articles:
 Multiple-View ViewPager Options. It&amp;rsquo;s a brilliant set of methods to display several fragments simultaneously using ViewPager. I&amp;rsquo;ve personally used first method (overriding getPageWidth() in PagerAdapter) - it works for me. Android ViewPager with Multiple Views. Looks like third method from previous article.  And StackOverflow discussions:
 Can ViewPager have multiple views in per page?. There are links to CommonsWare article and description of method used for some Dutch newspaper app.</description>
    </item>
    
    <item>
      <title>Retaining state with headless fragments</title>
      <link>https://dddpaul.github.io/blog/2014/07/29/headless-fragments/</link>
      <pubDate>Tue, 29 Jul 2014 07:55:41 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/07/29/headless-fragments/</guid>
      <description>Some articles:
 Official Fragments guide. Has some clues for headless fragments (see &amp;ldquo;Adding a fragment without a UI&amp;rdquo;). Superb multi-pane fragments tutorial from Lars Vogel. Contains some tips for headless fragments. Android best tip to work with fragments and orientation change. More detailed headless fragments technique description. Headless fragment example - FragmentRetainInstance.java. In this code headless fragment is created from other fragment. In my case it&amp;rsquo;s inappropriate because of Robolectric testing (recursive fragment transactions).</description>
    </item>
    
    <item>
      <title>First note</title>
      <link>https://dddpaul.github.io/blog/2014/07/28/oldest/</link>
      <pubDate>Mon, 28 Jul 2014 12:00:00 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/07/28/oldest/</guid>
      <description>This blog is based on Hugo - static site generator written on Go. GitHub interaction is organized with use of Hosting on GitHub Pages tutorial. See &amp;ldquo;Configure git Workflow&amp;rdquo; section specifically.
And for all of the git 1.7.x (and older) users - you can grab git-subtree from contrib directory of Git repo. I&amp;rsquo;ve used git-subtree from latest 1.8.x. It&amp;rsquo;s just a shell script, run make, chmod +x git-subtree and copy it to /usr/lib/git-core.</description>
    </item>
    
  </channel>
</rss>