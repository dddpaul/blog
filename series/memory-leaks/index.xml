<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory leaks on Pavel Derendyaev notes</title>
    <link>https://dddpaul.github.io/blog/series/memory-leaks/</link>
    <description>Recent content in Memory leaks on Pavel Derendyaev notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Jan 2015 22:35:49 +0300</lastBuildDate><atom:link href="https://dddpaul.github.io/blog/series/memory-leaks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>List of memory leaks articles</title>
      <link>https://dddpaul.github.io/blog/2015/01/17/memory-leaks-articles/</link>
      <pubDate>Sat, 17 Jan 2015 22:35:49 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/17/memory-leaks-articles/</guid>
      <description>&amp;ldquo;Solving OutOfMemoryError&amp;rdquo; series from Nikita Salnikov-Tarnovsky and Vladimir Šor:
Solving OutOfMemoryError (part 1) – story of a developer Solving OutOfMemoryError (part 2) – why didn’t operations solve it? Solving OutOfMemoryError (part 3) – where do you start? Solving OutOfMemoryError (part 4) – memory profilers Solving OutOfMemoryError (part 5) – JDK Tools Solving OutOfMemoryError (part 6) – Dump is not a waste &amp;ldquo;Classloader leaks&amp;rdquo; series from Mattias Jiderhamn:
Classloader leaks I – How to find classloader leaks with Eclipse Memory Analyser (MAT) Classloader leaks II – Find and work around unwanted references Classloader leaks III – “Die Thread, die!</description>
    </item>
    
    <item>
      <title>Борьба с утечками памяти в Android (Badoo)</title>
      <link>https://dddpaul.github.io/blog/2014/10/21/android-memory-leak-badoo/</link>
      <pubDate>Tue, 21 Oct 2014 14:30:16 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/10/21/android-memory-leak-badoo/</guid>
      <description>На хабре появилась статья Борьба с утечками памяти в Android. Часть 1 от компании Badoo. Т.к. тема созвучна с моими постами из серии Memory leaks, то решил вкратце описать их методы.
Суть проблемы — использование android.os.Handler, в который постится анонимный Runnable с помощью метода [postDelayed](http://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable, long). Для демонстрации, Runnable просто меняет какой-либо TextView (т.е. содержит внутри себя ссылку mTextView), и время до выполнения Runnable берется довольно большим. Так вот, если за этот промежуток времени повернуть девайс несколько раз, то старые активити не будут собираться GC, т.</description>
    </item>
    
    <item>
      <title>Подводные камни смены ориентации в Android</title>
      <link>https://dddpaul.github.io/blog/2014/08/02/orientation-change/</link>
      <pubDate>Sat, 02 Aug 2014 13:32:33 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/08/02/orientation-change/</guid>
      <description>После нескольких дней отладки приложения пришел к выводу, что смена ориентации (rotation, orientation change) требует к себе особого внимания. Наконец-то я понял тех разработчиков, которые напрочь запрещают смену ориентации в своем софте. Ведь, не зная некоторых неочевидных нюансов, можно легко получить крах приложения или утечку памяти.
Опишу в порядке возрастания сложности, на какие подводные камни мне пришлось натолкнуться.
Beginner&amp;rsquo;s level Надо сохранять состояние (state) фрагментов. Не сохранил — потерял, т.к. активити и фрагменты будут пересозданы.</description>
    </item>
    
    <item>
      <title>Android memory leaks</title>
      <link>https://dddpaul.github.io/blog/2014/08/01/android-memory-leaks/</link>
      <pubDate>Fri, 01 Aug 2014 13:34:16 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/08/01/android-memory-leaks/</guid>
      <description>Articles:
Avoiding memory leaks. This great article describes base causes of memory leaks on Android. I quote summary from there:
Do not keep long-lived references to a context-activity (a reference to an activity should have the same life cycle as the activity itself) Try using the context-application instead of a context-activity Avoid non-static inner classes in an activity if you don&amp;rsquo;t control their life cycle, use a static inner class and make a weak reference to the activity inside.</description>
    </item>
    
  </channel>
</rss>
