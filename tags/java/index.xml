<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Pavel Derendyaev notes</title>
    <link>https://dddpaul.github.io/blog/tags/java/</link>
    <description>Recent content in Java on Pavel Derendyaev notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Aug 2019 22:55:13 +0300</lastBuildDate>
    
	<atom:link href="https://dddpaul.github.io/blog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backend stories 4.0 - митап в Альфа-Банке</title>
      <link>https://dddpaul.github.io/blog/2019/08/10/alfabank-java-meetup-4/</link>
      <pubDate>Sat, 10 Aug 2019 22:55:13 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2019/08/10/alfabank-java-meetup-4/</guid>
      <description>9 августа прошел Java-митап Backend stories 4.0 в Альфа-банке.
Презентации доступны на страничке с отчетом о событии.
Прямая ссылка на запись трансляции.
Мой доклад - Отказоустойчивость в большом Интернете</description>
    </item>
    
    <item>
      <title>Backend stories 3.0 - митап в Альфа-Банке</title>
      <link>https://dddpaul.github.io/blog/2019/04/01/alfabank-java-meetup-3/</link>
      <pubDate>Mon, 01 Apr 2019 22:55:13 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2019/04/01/alfabank-java-meetup-3/</guid>
      <description>29 марта прошел Java-митап Backend stories 3.0 в Альфа-банке.
Материалы доступны на страничке с отчетом о событии.
Прямая ссылка на запись трансляции.</description>
    </item>
    
    <item>
      <title>Backend stories 2.0 - митап в Альфа-Банке</title>
      <link>https://dddpaul.github.io/blog/2018/10/15/alfabank-java-meetup-2/</link>
      <pubDate>Mon, 15 Oct 2018 22:55:13 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2018/10/15/alfabank-java-meetup-2/</guid>
      <description>04 октября прошел Java-митап Backend stories 2.0 в Альфа-банке.
Все материалы доступны на страничке с отчетом о событии.
Прямая ссылка на запись трансляции.</description>
    </item>
    
    <item>
      <title>Backend stories meetup в Альфа-Банке</title>
      <link>https://dddpaul.github.io/blog/2018/06/22/alfabank-java-meetup-1/</link>
      <pubDate>Fri, 22 Jun 2018 22:55:13 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2018/06/22/alfabank-java-meetup-1/</guid>
      <description>21 июня прошел Java-митап Backend stories в Альфа-банке.
Доклады:
 Kotlin: выходим за рамки JVM Testcontainers: Oracle inside Как жить, если вы неправильно готовите Elasticsearch  Также есть запись трансляции.</description>
    </item>
    
    <item>
      <title>Different URI encodings for one Tomcat-based application</title>
      <link>https://dddpaul.github.io/blog/2015/12/21/spring-boot-uri-encoding/</link>
      <pubDate>Mon, 21 Dec 2015 18:45:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/12/21/spring-boot-uri-encoding/</guid>
      <description>There some cases when you would like to map different URI encodings on different HTTP endpoints. And one of those cases is when your application handles GET requests containing percent-encoded non-ASCII data in different charsets. For example, one HTTP endpoint uses standard UTF-8 while the other uses Windows-1251.
Plain Tomcat way According to How do I change how GET parameters are interpreted? the only way to specify GET request encoding is to use by-connector URIEncoding attribute.</description>
    </item>
    
    <item>
      <title>Тонкости использования аннотации @Value в Spring Boot</title>
      <link>https://dddpaul.github.io/blog/2015/07/12/spring-boot-value/</link>
      <pubDate>Sun, 12 Jul 2015 18:30:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/07/12/spring-boot-value/</guid>
      <description>Аннотация @Value - это самый простой способ для &amp;ldquo;впрыскивания&amp;rdquo; значений из конфигурации Spring Boot в код. При этом также можно задать значение по-умолчанию.
Однако, стоит учитывать, что резолвинг значения будет выполняться для каждой аннотации @Value. Например, если аннотировать @Value два поля (в одном или разных классах - не суть важно) вот так:
@Value(&amp;#34;${unique-param}&amp;#34;) private String param1; @Value(&amp;#34;${unique-param}&amp;#34;) private String param2; , то в debug-логе мы увидим:
TRACE 23601 --- [lication.main()] o.</description>
    </item>
    
    <item>
      <title>Логирование HTTP-запросов в Tomcat</title>
      <link>https://dddpaul.github.io/blog/2015/06/30/tomcat-http-logging/</link>
      <pubDate>Tue, 30 Jun 2015 13:27:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/06/30/tomcat-http-logging/</guid>
      <description>Apache Tomcat Request Dumper Filter Request Dumper Filter входит в состав Tomcat. Рассмотрим способы его конфигурации.
Spring Boot Достаточно поместить вот такой bean в класс, аннотированный @Configuration:
@Bean RequestDumperFilter requestDumper() { return new RequestDumperFilter(); } Вывод дампа запросов в отдельный лог здесь не рассматриваем.
Tomcat 7 Стандартный способ конфигурации фильтра — server.xml / context.xml / web.xml, в зависимости от того, какой scope нам нужен. Для логирования запросов в рамках одного приложения — web.</description>
    </item>
    
    <item>
      <title>RabbitMQ links</title>
      <link>https://dddpaul.github.io/blog/2015/05/15/rabbitmq-links/</link>
      <pubDate>Fri, 15 May 2015 08:27:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/05/15/rabbitmq-links/</guid>
      <description>RabbitMQ confirms, transactions, reply-to functionality and Spring integration:
 Using Spring AMQP Introducing Publisher Confirms Transaction support with RabbitMQ Confirms (aka Publisher Acknowledgements) Direct reply-to Remote procedure call (RPC) TxDontLoseMessages.java ConfirmDontLoseMessages.java RabbitMQ Spring tutorial &amp;amp; rabbitmq-examples  </description>
    </item>
    
    <item>
      <title>Java builders</title>
      <link>https://dddpaul.github.io/blog/2015/04/12/java-builders/</link>
      <pubDate>Sun, 12 Apr 2015 12:15:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/04/12/java-builders/</guid>
      <description>So it&amp;rsquo;s time to scrutinize a builder pattern. There are bunch of options to implement builder pattern in Java:
 classic builder; elegant builder; classic builder with IntelliJ IDEA plugin; Google AutoValue builder; Project Lombok builder; POJO builder; Immutables builder.  All of these variants have been examined in Java builders GitHub project.
The winners are (and this a tough IMHO):
 IDEA InnerBuilder plugin if you use builder class from frameworks like Spring/Spring MVC or Play.</description>
    </item>
    
    <item>
      <title>Oracle connectivity in Java</title>
      <link>https://dddpaul.github.io/blog/2015/02/14/oracle-connectivity/</link>
      <pubDate>Sat, 14 Feb 2015 22:11:00 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/02/14/oracle-connectivity/</guid>
      <description>A new small test project is intended to answer the question - what is the proper way to specify network timeout for database connection?
There so many ways in JDBC API:
 [CommonDataSource.setLoginTimeout](http://docs.oracle.com/javase/7/docs/api/javax/sql/CommonDataSource.html#setLoginTimeout(int)) [Connection.setNetworkTimeout](http://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html#setNetworkTimeout(java.util.concurrent.Executor,%20int)) [Statement.setQueryTimeout](http://docs.oracle.com/javase/7/docs/api/java/sql/Statement.html#setQueryTimeout(int))  And every database has it&amp;rsquo;s own non-standard ways in addition.
But these tests have been lead us to a single conclusion — you must specify network timeouts on driver level. All these JDBC stuff isn&amp;rsquo;t enough for Oracle database.</description>
    </item>
    
    <item>
      <title>Java network listeners</title>
      <link>https://dddpaul.github.io/blog/2015/02/01/java-listeners/</link>
      <pubDate>Sun, 01 Feb 2015 18:44:06 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/02/01/java-listeners/</guid>
      <description>I&amp;rsquo;ve written a small listeners library today. It allows to create Callables which can be submitted to ExecutorService. The callable itself implements creating server socket and binding it to local port.
There two principal type of listeners: blocking and non-blocking (thanks to Java NIO.
 Blocking listener is very simple but in can&amp;rsquo;t be interrupted by calling thread. So there&amp;rsquo;s no point in that:
Future&amp;lt;Socket&amp;gt; future = executor.submit( Listeners.createListener( PORT ) ); try { Socket socket = future.</description>
    </item>
    
    <item>
      <title>List of memory leaks articles</title>
      <link>https://dddpaul.github.io/blog/2015/01/17/memory-leaks-articles/</link>
      <pubDate>Sat, 17 Jan 2015 22:35:49 +0300</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2015/01/17/memory-leaks-articles/</guid>
      <description>&amp;ldquo;Solving OutOfMemoryError&amp;rdquo; series from Nikita Salnikov-Tarnovsky and Vladimir Šor:
 Solving OutOfMemoryError (part 1) – story of a developer Solving OutOfMemoryError (part 2) – why didn’t operations solve it? Solving OutOfMemoryError (part 3) – where do you start? Solving OutOfMemoryError (part 4) – memory profilers Solving OutOfMemoryError (part 5) – JDK Tools Solving OutOfMemoryError (part 6) – Dump is not a waste   &amp;ldquo;Classloader leaks&amp;rdquo; series from Mattias Jiderhamn:</description>
    </item>
    
    <item>
      <title>Using method handles to get logger</title>
      <link>https://dddpaul.github.io/blog/2014/12/21/method-handle-logger/</link>
      <pubDate>Sun, 21 Dec 2014 13:36:15 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/12/21/method-handle-logger/</guid>
      <description>One more quote from The Well-Grounded Java Developer by Benjamin J. Evans and Martijn Verburg about useful feature of MethodHandle.
 One additional feature that method handles provide is the ability to determine the current class from a static context. If you’ve ever written logging code (such as for log4j) that looked like this,
Logger lgr = LoggerFactory.getLogger(MyClass.class); you know that this code is fragile. If it’s refactored to move into a superclass or subclass, the explicit class name would cause problems With Java 7, however, you can write this:</description>
    </item>
    
    <item>
      <title>Java Memory Model in few words</title>
      <link>https://dddpaul.github.io/blog/2014/12/06/jmm-1/</link>
      <pubDate>Sat, 06 Dec 2014 18:33:46 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/12/06/jmm-1/</guid>
      <description>This article is mostly consist of quotes from The Well-Grounded Java Developer by Benjamin J. Evans and Martijn Verburg. I like simplicity and brevity of their explanation approach.
And that&amp;rsquo;s how Happens-Before and Synchronizes-With relationships are explained.
  Happens-Before — This relationship indicates that one block of code fully completes before the other can start. Synchronizes-With — This means that an action will synchronize its view of an object with main memory before continuing.</description>
    </item>
    
    <item>
      <title>Борьба с утечками памяти в Android (Badoo)</title>
      <link>https://dddpaul.github.io/blog/2014/10/21/android-memory-leak-badoo/</link>
      <pubDate>Tue, 21 Oct 2014 14:30:16 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/10/21/android-memory-leak-badoo/</guid>
      <description>На хабре появилась статья Борьба с утечками памяти в Android. Часть 1 от компании Badoo. Т.к. тема созвучна с моими постами из серии Memory leaks, то решил вкратце описать их методы.
Суть проблемы — использование android.os.Handler, в который постится анонимный Runnable с помощью метода [postDelayed](http://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable, long). Для демонстрации, Runnable просто меняет какой-либо TextView (т.е. содержит внутри себя ссылку mTextView), и время до выполнения Runnable берется довольно большим. Так вот, если за этот промежуток времени повернуть девайс несколько раз, то старые активити не будут собираться GC, т.</description>
    </item>
    
    <item>
      <title>Подводные камни смены ориентации в Android</title>
      <link>https://dddpaul.github.io/blog/2014/08/02/orientation-change/</link>
      <pubDate>Sat, 02 Aug 2014 13:32:33 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/08/02/orientation-change/</guid>
      <description>После нескольких дней отладки приложения пришел к выводу, что смена ориентации (rotation, orientation change) требует к себе особого внимания. Наконец-то я понял тех разработчиков, которые напрочь запрещают смену ориентации в своем софте. Ведь, не зная некоторых неочевидных нюансов, можно легко получить крах приложения или утечку памяти.
Опишу в порядке возрастания сложности, на какие подводные камни мне пришлось натолкнуться.
Beginner&amp;rsquo;s level Надо сохранять состояние (state) фрагментов. Не сохранил — потерял, т.к. активити и фрагменты будут пересозданы.</description>
    </item>
    
    <item>
      <title>Android memory leaks</title>
      <link>https://dddpaul.github.io/blog/2014/08/01/android-memory-leaks/</link>
      <pubDate>Fri, 01 Aug 2014 13:34:16 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/08/01/android-memory-leaks/</guid>
      <description>Articles:
  Avoiding memory leaks. This great article describes base causes of memory leaks on Android. I quote summary from there:
 Do not keep long-lived references to a context-activity (a reference to an activity should have the same life cycle as the activity itself) Try using the context-application instead of a context-activity Avoid non-static inner classes in an activity if you don&amp;rsquo;t control their life cycle, use a static inner class and make a weak reference to the activity inside.</description>
    </item>
    
    <item>
      <title>Multi-pane layout for tablets</title>
      <link>https://dddpaul.github.io/blog/2014/07/30/multi-pane/</link>
      <pubDate>Wed, 30 Jul 2014 07:14:41 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/07/30/multi-pane/</guid>
      <description>Some articles:
 Multiple-View ViewPager Options. It&amp;rsquo;s a brilliant set of methods to display several fragments simultaneously using ViewPager. I&amp;rsquo;ve personally used first method (overriding getPageWidth() in PagerAdapter) - it works for me. Android ViewPager with Multiple Views. Looks like third method from previous article.  And StackOverflow discussions:
 Can ViewPager have multiple views in per page?. There are links to CommonsWare article and description of method used for some Dutch newspaper app.</description>
    </item>
    
    <item>
      <title>Retaining state with headless fragments</title>
      <link>https://dddpaul.github.io/blog/2014/07/29/headless-fragments/</link>
      <pubDate>Tue, 29 Jul 2014 07:55:41 +0000</pubDate>
      
      <guid>https://dddpaul.github.io/blog/2014/07/29/headless-fragments/</guid>
      <description>Some articles:
 Official Fragments guide. Has some clues for headless fragments (see &amp;ldquo;Adding a fragment without a UI&amp;rdquo;). Superb multi-pane fragments tutorial from Lars Vogel. Contains some tips for headless fragments. Android best tip to work with fragments and orientation change. More detailed headless fragments technique description. Headless fragment example - FragmentRetainInstance.java. In this code headless fragment is created from other fragment. In my case it&amp;rsquo;s inappropriate because of Robolectric testing (recursive fragment transactions).</description>
    </item>
    
  </channel>
</rss>